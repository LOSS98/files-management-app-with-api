{
	"info": {
		"_postman_id": "a1b2c3d4-5e6f-7890-abcd-ef1234567890",
		"name": "File Manager API",
		"description": "Complete API collection for File Manager - a modern, secure file management system with multi-application support. Built with TypeScript, featuring Fastify backend and React frontend.\n\nüîó **Repository**: https://github.com/your-username/file-manager\nüìñ **Documentation**: Full API documentation in README.md\nüîí **Security**: JWT + API Key authentication with comprehensive validation\n\n## Quick Setup\n1. Start the application: `npm run dev`\n2. Import this collection\n3. Set environment variable `base_url` to `http://localhost:3001`\n4. Run \"Admin Login\" to get JWT token\n5. Create an application to get API key\n\n## Authentication\n- **Admin Routes**: JWT token (auto-saved after login)\n- **File Routes**: API key (auto-saved after app creation)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "file-manager-v1"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('jwt_token', response.token);",
									"    pm.environment.set('admin_user_id', response.user.id);",
									"    pm.environment.set('admin_username', response.user.username);",
									"    console.log('‚úÖ JWT Token saved to environment');",
									"    console.log('üë§ Logged in as:', response.user.username);",
									"} else {",
									"    console.log('‚ùå Login failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "üîë **Admin Authentication**\n\nLogin with admin credentials to access the management panel.\n\n**Default Credentials:**\n- Username: `admin`\n- Password: `admin123`\n\n**Success Response:**\n- JWT token (auto-saved to environment)\n- User information\n\n**Security Features:**\n- Bcrypt password hashing\n- JWT with configurable secret\n- Role-based access control"
					},
					"response": [
						{
							"name": "‚úÖ Successful Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhZG1pbi11dWlkIiwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTYzOTQ4NDgwMCwiZXhwIjoxNjM5NTcxMjAwfQ.signature\",\n  \"user\": {\n    \"id\": \"admin-uuid-here\",\n    \"username\": \"admin\",\n    \"role\": \"admin\"\n  }\n}"
						},
						{
							"name": "‚ùå Invalid Credentials",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"wrong\",\n  \"password\": \"credentials\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Invalid credentials\"\n}"
						}
					]
				}
			],
			"description": "üîê **Authentication System**\n\nSecure JWT-based authentication for admin access with comprehensive security features."
		},
		{
			"name": "üë• User Management",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						},
						"description": "üìã **List All Users**\n\nRetrieve all users in the system with their roles and creation dates.\n\n**Authentication:** Admin JWT token required\n\n**Response Features:**\n- User ID, username, role\n- Creation timestamp (French format: dd/mm/yyyy)\n- Password excluded for security\n\n**Use Cases:**\n- Admin dashboard user list\n- User management interface\n- System auditing"
					},
					"response": [
						{
							"name": "‚úÖ Users Retrieved",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/admin/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"users\": [\n    {\n      \"id\": \"admin-uuid-1\",\n      \"username\": \"admin\",\n      \"role\": \"admin\",\n      \"created_at\": \"2024-01-15T10:30:00.000Z\"\n    },\n    {\n      \"id\": \"user-uuid-2\",\n      \"username\": \"johndoe\",\n      \"role\": \"user\",\n      \"created_at\": \"2024-01-16T14:22:00.000Z\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('created_user_id', response.id);",
									"    console.log('‚úÖ User created:', response.username);",
									"    console.log('üÜî User ID saved to environment');",
									"} else {",
									"    console.log('‚ùå User creation failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"newuser\",\n  \"password\": \"securepass123\",\n  \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						},
						"description": "‚ûï **Create New User**\n\nAdd a new user to the system with specified role and credentials.\n\n**Authentication:** Admin JWT token required\n\n**Validation Rules:**\n- Username: Required, must be unique\n- Password: Minimum 8 characters\n- Role: Must be \"admin\" or \"user\"\n\n**Security Features:**\n- Password hashing with bcrypt (12 rounds)\n- Input sanitization\n- Duplicate username prevention\n\n**Available Roles:**\n- `admin`: Full system access\n- `user`: Standard user permissions"
					},
					"response": [
						{
							"name": "‚úÖ User Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"newuser\",\n  \"password\": \"securepass123\",\n  \"role\": \"user\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/admin/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"new-user-uuid\",\n  \"username\": \"newuser\",\n  \"role\": \"user\"\n}"
						},
						{
							"name": "‚ùå Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"123\",\n  \"role\": \"invalid\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/admin/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Password must be at least 8 characters long\"\n}"
						}
					]
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{created_user_id}}"
							]
						},
						"description": "üóëÔ∏è **Delete User**\n\nRemove a user from the system permanently.\n\n**Authentication:** Admin JWT token required\n\n**Parameters:**\n- `id`: User UUID from user creation or user list\n\n**Security Considerations:**\n- Only admins can delete users\n- Permanent action - cannot be undone\n- Consider data retention policies\n\n**Use Cases:**\n- Remove inactive accounts\n- Clean up test users\n- Security incident response"
					},
					"response": [
						{
							"name": "‚úÖ User Deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/admin/users/user-uuid-to-delete",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"user-uuid-to-delete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						}
					]
				}
			],
			"description": "üë• **User Management System**\n\nComprehensive user administration with role-based access control and security validation."
		},
		{
			"name": "üöÄ Application Management",
			"item": [
				{
					"name": "Get All Applications (User)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/applications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								"applications"
							]
						},
						"description": "üìã **List Applications**\n\nRetrieve all registered applications with their API keys and metadata.\n\n**Authentication:** Admin JWT token required\n\n**Response Data:**\n- Application ID and name\n- API key for file operations\n- Folder path for file storage\n- Creation timestamp\n\n**Security Notes:**\n- API keys are sensitive - handle carefully\n- Each application has isolated file storage\n- Keys can be regenerated if compromised"
					},
					"response": [
						{
							"name": "‚úÖ Applications Retrieved",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/admin/applications",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"applications"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"applications\": [\n    {\n      \"id\": \"app-uuid-1\",\n      \"name\": \"MyWebApp\",\n      \"api_key\": \"app_1234567890abcdef1234567890abcdef\",\n      \"folder_path\": \"./uploads/MyWebApp\",\n      \"created_at\": \"2024-01-15T10:30:00.000Z\"\n    },\n    {\n      \"id\": \"app-uuid-2\",\n      \"name\": \"MobileApp\",\n      \"api_key\": \"app_abcdef1234567890abcdef1234567890\",\n      \"folder_path\": \"./uploads/MobileApp\",\n      \"created_at\": \"2024-01-16T14:22:00.000Z\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Create Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('app_id', response.id);",
									"    pm.environment.set('api_key', response.api_key);",
									"    pm.environment.set('app_name', response.name);",
									"    console.log('‚úÖ Application created:', response.name);",
									"    console.log('üîë API Key saved to environment');",
									"    console.log('üìÅ Folder path:', response.folder_path);",
									"} else {",
									"    console.log('‚ùå Application creation failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"MyNewApp\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/applications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"applications"
							]
						},
						"description": "‚ûï **Create Application**\n\nRegister a new application and generate its API key for file operations.\n\n**Authentication:** Admin JWT token required\n\n**Process:**\n1. Creates unique application record\n2. Generates secure API key (format: app_32hexchars)\n3. Creates dedicated folder for file storage\n4. Returns API key for file operations\n\n**API Key Features:**\n- 32-character hexadecimal identifier\n- Unique per application\n- Required for all file operations\n- Can be regenerated if needed\n\n**Folder Structure:**\n- `./uploads/{ApplicationName}/`\n- Isolated storage per application"
					},
					"response": [
						{
							"name": "‚úÖ Application Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"MyNewApp\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/admin/applications",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"applications"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"new-app-uuid\",\n  \"name\": \"MyNewApp\",\n  \"api_key\": \"app_abcdef1234567890abcdef1234567890\",\n  \"folder_path\": \"./uploads/MyNewApp\"\n}"
						},
						{
							"name": "‚ùå Duplicate Name",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"ExistingApp\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/admin/applications",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"applications"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Application name already exists\"\n}"
						}
					]
				},
				{
					"name": "Regenerate API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('api_key', response.api_key);",
									"    console.log('‚úÖ API Key regenerated');",
									"    console.log('üÜï New API key saved to environment');",
									"    console.log('‚ö†Ô∏è  Old API key is now invalid');",
									"} else {",
									"    console.log('‚ùå API key regeneration failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/applications/{{app_id}}/regenerate-key",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"applications",
								"{{app_id}}",
								"regenerate-key"
							]
						},
						"description": "üîÑ **Regenerate API Key**\n\nGenerate a new API key for an application, invalidating the old one.\n\n**Authentication:** Admin JWT token required\n\n**Security Considerations:**\n- Old API key becomes invalid immediately\n- All existing file operations with old key will fail\n- Update client applications with new key\n- Use for security incidents or key rotation\n\n**When to Regenerate:**\n- Security breach or suspected compromise\n- Regular key rotation policy\n- Employee access changes\n- API key accidentally exposed\n\n**Impact:**\n- Existing file operations continue working\n- Client applications need key update"
					},
					"response": [
						{
							"name": "‚úÖ API Key Regenerated",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/admin/applications/app-uuid/regenerate-key",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"applications",
										"app-uuid",
										"regenerate-key"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"api_key\": \"app_newfreshkey1234567890abcdef1234\"\n}"
						}
					]
				},
				{
					"name": "Delete Application",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/applications/{{app_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"applications",
								"{{app_id}}"
							]
						},
						"description": "üóëÔ∏è **Delete Application**\n\nCompletely remove an application and all its associated files.\n\n**Authentication:** Admin JWT token required\n\n**‚ö†Ô∏è DESTRUCTIVE OPERATION:**\n- Deletes application record\n- Removes ALL associated files\n- Invalidates API key permanently\n- Cannot be undone\n\n**Data Removed:**\n- Application metadata\n- All uploaded files\n- File database records\n- Storage folder contents\n\n**Use Cases:**\n- Application decommissioning\n- Clean up test applications\n- Security incident response"
					},
					"response": [
						{
							"name": "‚úÖ Application Deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/admin/applications/app-uuid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"applications",
										"app-uuid"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						}
					]
				}
			],
			"description": "üöÄ **Application Management**\n\nComplete application lifecycle management with secure API key generation and isolated file storage."
		},
		{
			"name": "üåê Public File Access",
			"item": [
				{
					"name": "Access Public File",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/public/{{file_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"public",
								"{{file_id}}"
							]
						},
						"description": "üåê **Access Public File**\n\nRetrieve public files without authentication - perfect for web assets.\n\n**Authentication:** None required\n\n**üìã Requirements:**\n- File must be marked as public (`is_public: true`)\n- Valid file ID\n\n**üì¶ Response:**\n- Direct file content with appropriate MIME type\n- Browser-friendly display for images\n- Download behavior for documents\n- Caching headers for performance\n\n**üéØ Perfect for:**\n- HTML `<img src=\"/public/{file_id}\">` tags\n- CSS `background-image: url('/public/{file_id}')`\n- Direct document links\n- Public file sharing\n- CDN-style asset serving\n\n**‚ö° Performance:**\n- Cached responses (1 year cache-control)\n- Optimized for web delivery\n- No authentication overhead\n\n**üîí Security:**\n- Only public files accessible\n- Private files return 404\n- No directory traversal risks"
					},
					"response": [
						{
							"name": "‚úÖ Public File Retrieved",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/public/public-file-uuid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"public",
										"public-file-uuid"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "image/jpeg"
								},
								{
									"key": "Cache-Control",
									"value": "public, max-age=31536000"
								}
							],
							"cookie": [],
							"body": "[Binary file data - image content for display in browser]"
						},
						{
							"name": "‚ùå File Not Public or Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/public/private-file-uuid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"public",
										"private-file-uuid"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Public file not found\"\n}"
						}
					]
				},
				{
					"name": "Get Public File Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/public/{{file_id}}/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"public",
								"{{file_id}}",
								"info"
							]
						},
						"description": "‚ÑπÔ∏è **Get Public File Metadata**\n\nRetrieve metadata about a public file without authentication.\n\n**Authentication:** None required\n\n**üìã Requirements:**\n- File must be marked as public\n- Valid file ID\n\n**üìä Response Data:**\n- File ID and names\n- File type and size\n- Creation date\n- Public status confirmation\n\n**üéØ Use Cases:**\n- File galleries with metadata\n- API integration for public files\n- File information displays\n- Public file catalogs\n\n**üîí Security:**\n- No sensitive paths revealed\n- Only public file metadata\n- No application information exposed"
					},
					"response": [
						{
							"name": "‚úÖ Public File Info Retrieved",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/public/public-file-uuid/info",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"public",
										"public-file-uuid",
										"info"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"public-file-uuid\",\n  \"original_name\": \"public-image.jpg\",\n  \"current_name\": \"public-image_uuid.jpg\",\n  \"file_type\": \"image/jpeg\",\n  \"size\": 512000,\n  \"created_at\": \"2024-01-15T14:22:00.000Z\",\n  \"is_public\": true\n}"
						}
					]
				}
			],
			"description": "üåê **Public File Access**\n\nAccess public files without authentication - perfect for web assets, images, and shared documents."
		},
		{
			"name": "üìÅ File Operations",
			"item": [
				{
					"name": "Upload File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('file_id', response.id);",
									"    pm.environment.set('file_name', response.current_name);",
									"    pm.environment.set('file_type', response.file_type);",
									"    console.log('‚úÖ File uploaded:', response.original_name);",
									"    console.log('üìÑ File ID saved to environment');",
									"    console.log('üìä Size:', Math.round(response.size / 1024) + ' KB');",
									"    console.log('üéØ Type:', response.file_type);",
									"} else {",
									"    console.log('‚ùå File upload failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"description": "Select a file to upload (Images, PDFs, or text files up to 1GB)"
								},
								{
									"key": "is_public",
									"value": "false",
									"description": "Set to 'true' to make file publicly accessible without authentication",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/files/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"upload"
							]
						},
						"description": "üì§ **Upload File**\n\nUpload files with comprehensive security validation and processing.\n\n**Authentication:** API Key required (`X-API-Key` header)\n\n**üìã File Restrictions:**\n- **Allowed Types**: JPEG, PNG, GIF, WebP, SVG, PDF, Plain Text\n- **Max Size**: 1GB per file\n- **Security**: Filename sanitization, type validation\n\n**üîí Security Features:**\n- MIME type validation\n- File size limits\n- Filename sanitization\n- UUID-based unique naming\n- Isolated storage per application\n\n**üìÅ Storage:**\n- Original filename preserved in metadata\n- Unique filename generated for storage\n- Organized by application folder\n\n**üîì Public Access:**\n- Set `is_public` to `true` for public access\n- Public files accessible via `/public/{file_id}` without authentication\n- Perfect for images in HTML `<img src=\"/public/{file_id}\">` tags\n\n**üéØ Use Cases:**\n- Document management\n- Image galleries\n- File sharing systems\n- Content management\n- Public assets (images, documents)"
					},
					"response": [
						{
							"name": "‚úÖ File Uploaded Successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/files/upload",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"upload"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"file-uuid-1234\",\n  \"original_name\": \"document.pdf\",\n  \"current_name\": \"document_a1b2c3d4-e5f6-7890-abcd-ef1234567890.pdf\",\n  \"file_type\": \"application/pdf\",\n  \"size\": 1024000,\n  \"is_public\": false\n}"
						},
						{
							"name": "‚ùå File Type Not Allowed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/files/upload",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"upload"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"File type not allowed\"\n}"
						},
						{
							"name": "‚ùå File Too Large",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/files/upload",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"upload"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"File too large. Maximum size is 1GB\"\n}"
						}
					]
				},
				{
					"name": "Get Files List",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/files",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files"
							]
						},
						"description": "üìã **List Files**\n\nRetrieve all files for the authenticated application.\n\n**Authentication:** API Key required\n\n**üìä Response Data:**\n- File ID and names (original + current)\n- File type and size information\n- Storage path and metadata\n- Creation timestamp (French format)\n\n**üîí Security:**\n- Only shows files for authenticated application\n- Isolated data per API key\n- No cross-application access\n\n**üìÖ Date Format:**\n- French format: dd/mm/yyyy\n- Consistent with frontend display\n\n**üéØ Use Cases:**\n- File management dashboards\n- Gallery displays\n- File browsers\n- Application file audits"
					},
					"response": [
						{
							"name": "‚úÖ Files Retrieved",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/files/files",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"files"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"files\": [\n    {\n      \"id\": \"file-uuid-1\",\n      \"application_id\": \"app-uuid\",\n      \"original_name\": \"document.pdf\",\n      \"current_name\": \"document_uuid-here.pdf\",\n      \"file_path\": \"./uploads/MyApp/document_uuid-here.pdf\",\n      \"file_type\": \"application/pdf\",\n      \"size\": 1024000,\n      \"created_at\": \"2024-01-15T10:30:00.000Z\"\n    },\n    {\n      \"id\": \"file-uuid-2\",\n      \"application_id\": \"app-uuid\",\n      \"original_name\": \"image.jpg\",\n      \"current_name\": \"image_uuid-here.jpg\",\n      \"file_path\": \"./uploads/MyApp/image_uuid-here.jpg\",\n      \"file_type\": \"image/jpeg\",\n      \"size\": 512000,\n      \"created_at\": \"2024-01-15T14:22:00.000Z\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Rename File",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"new_name\": \"my-renamed-document\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/files/{{file_id}}/rename",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"{{file_id}}",
								"rename"
							]
						},
						"description": "‚úèÔ∏è **Rename File**\n\nUpdate the display name of a file while preserving the extension.\n\n**Authentication:** API Key required\n\n**üîí Security Features:**\n- Filename sanitization\n- Invalid character removal\n- Extension preservation\n- Path traversal prevention\n\n**üìù Validation Rules:**\n- Name cannot be empty\n- Invalid characters: `< > : \" / \\ | ? *`\n- Original extension is preserved\n- Unique storage name unchanged\n\n**üí° How it Works:**\n1. Validates new name format\n2. Sanitizes input for security\n3. Updates file system and database\n4. Preserves original file extension\n\n**üéØ Use Cases:**\n- User-friendly file naming\n- Document organization\n- File management systems"
					},
					"response": [
						{
							"name": "‚úÖ File Renamed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"new_name\": \"my-renamed-document\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/files/files/file-uuid/rename",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"files",
										"file-uuid",
										"rename"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"new_name\": \"my-renamed-document.pdf\"\n}"
						},
						{
							"name": "‚ùå Invalid Characters",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"new_name\": \"invalid<>name\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/files/files/file-uuid/rename",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"files",
										"file-uuid",
										"rename"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"Filename contains invalid characters\"\n}"
						}
					]
				},
				{
					"name": "Convert Image to WebP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('svg_file_id', response.id);",
									"    console.log('‚úÖ Image converted to SVG:', response.current_name);",
									"    console.log('üÜî SVG file ID saved to environment');",
									"    console.log('üìä New size:', Math.round(response.size / 1024) + ' KB');",
									"} else {",
									"    console.log('‚ùå SVG conversion failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/files/files/{{file_id}}/convert-to-svg",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"files",
								"{{file_id}}",
								"convert-to-svg"
							]
						},
						"description": "üñºÔ∏è **Convert Image to SVG**\n\nTransform image files into scalable SVG format for web optimization.\n\n**Authentication:** API Key required\n\n**üìã Requirements:**\n- File must be an image type\n- Supported: JPEG, PNG, GIF, WebP\n- Original file remains unchanged\n\n**‚ö° Process:**\n1. Validates file is an image\n2. Extracts image dimensions\n3. Creates SVG wrapper with embedded image\n4. Saves as new SVG file\n5. Returns new file metadata\n\n**üéØ Benefits:**\n- Scalable vector format\n- Web-optimized display\n- Maintains image quality\n- Smaller file sizes (often)\n\n**üí° Output:**\n- New SVG file created\n- Original name + \" (SVG)\"\n- Separate file ID\n- MIME type: image/svg+xml\n\n**üöÄ Use Cases:**\n- Web graphics optimization\n- Responsive image display\n- Print-ready graphics\n- Icon generation"
					},
					"response": [
						{
							"name": "‚úÖ Image Converted to SVG",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/files/files/file-uuid/convert-to-svg",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"files",
										"file-uuid",
										"convert-to-svg"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"svg-file-uuid\",\n  \"original_name\": \"image.jpg (SVG)\",\n  \"current_name\": \"image_uuid-here.svg\",\n  \"file_type\": \"image/svg+xml\",\n  \"size\": 2048\n}"
						},
						{
							"name": "‚ùå Not an Image",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/files/files/pdf-file-uuid/convert-to-svg",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"files",
										"pdf-file-uuid",
										"convert-to-svg"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"File must be a non-SVG image\"\n}"
						}
					]
				},
				{
					"name": "Download File",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/files/files/{{file_id}}/download",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"files",
								"{{file_id}}",
								"download"
							]
						},
						"description": "‚¨áÔ∏è **Download File**\n\nRetrieve file contents with proper headers for browser download.\n\n**Authentication:** API Key required\n\n**üì¶ Response Format:**\n- **Content-Type**: Original file MIME type\n- **Content-Disposition**: `attachment; filename=\"original-name.ext\"`\n- **Body**: Binary file data\n\n**üîí Security Features:**\n- API key validation\n- File ownership verification\n- Safe filename headers\n- No path traversal risks\n\n**üíª Browser Behavior:**\n- Triggers automatic download\n- Uses original filename\n- Preserves file type association\n- No inline display (security)\n\n**üìä Supported Files:**\n- Documents (PDF)\n- Images (JPEG, PNG, GIF, WebP)\n- Text files\n- Generated SVG files\n\n**üéØ Use Cases:**\n- File sharing systems\n- Document management\n- Backup and export\n- User file access"
					},
					"response": [
						{
							"name": "‚úÖ File Downloaded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/files/files/file-uuid/download",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"files",
										"file-uuid",
										"download"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/pdf"
								},
								{
									"key": "Content-Disposition",
									"value": "attachment; filename=\"document.pdf\""
								}
							],
							"cookie": [],
							"body": "[Binary file data - actual file contents]"
						},
						{
							"name": "‚ùå File Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/files/files/nonexistent-uuid/download",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"files",
										"nonexistent-uuid",
										"download"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"File not found\"\n}"
						}
					]
				},
				{
					"name": "Toggle File Visibility",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"is_public\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/files/{{file_id}}/visibility",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"{{file_id}}",
								"visibility"
							]
						},
						"description": "üëÅÔ∏è **Toggle File Visibility**\n\nChange a file's visibility between public and private.\n\n**Authentication:** API Key required\n\n**üìù Request Body:**\n- `is_public`: Boolean value (true for public, false for private)\n\n**üîì Public Files:**\n- Accessible via `/public/{file_id}` without authentication\n- Perfect for web assets, images, shared documents\n- Can be used directly in HTML tags\n\n**üîí Private Files:**\n- Require API key authentication for access\n- Only accessible through authenticated endpoints\n- Default state for uploaded files\n\n**üéØ Use Cases:**\n- Making documents publicly shareable\n- Creating public image galleries\n- Controlling access to sensitive files\n- Converting private files to public assets"
					},
					"response": [
						{
							"name": "‚úÖ File Made Public",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"is_public\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/files/file-uuid/visibility",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"file-uuid",
										"visibility"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"is_public\": true,\n  \"message\": \"File made public\"\n}"
						},
						{
							"name": "‚úÖ File Made Private",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"is_public\": false\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/files/file-uuid/visibility",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"file-uuid",
										"visibility"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"is_public\": false,\n  \"message\": \"File made private\"\n}"
						}
					]
				},
				{
					"name": "Delete File",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/files/files/{{file_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"files",
								"files",
								"{{file_id}}"
							]
						},
						"description": "üóëÔ∏è **Delete File**\n\nPermanently remove a file from both database and file system.\n\n**Authentication:** API Key required\n\n**‚ö†Ô∏è DESTRUCTIVE OPERATION:**\n- Removes file from disk\n- Deletes database record\n- Cannot be undone\n- Immediate effect\n\n**üîí Security:**\n- API key validation\n- File ownership verification\n- No cross-application access\n- Safe file path handling\n\n**üìÅ Cleanup Process:**\n1. Validates file ownership\n2. Removes physical file\n3. Deletes database record\n4. Returns success confirmation\n\n**üí° Error Handling:**\n- File not found: 404 error\n- Disk errors: Logged but operation continues\n- Database cleanup: Always attempted\n\n**üéØ Use Cases:**\n- File management cleanup\n- Storage optimization\n- User file deletion\n- Application cleanup"
					},
					"response": [
						{
							"name": "‚úÖ File Deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/files/files/file-uuid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"files",
										"file-uuid"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "‚ùå File Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/files/files/nonexistent-uuid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"files",
										"files",
										"nonexistent-uuid"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"File not found\"\n}"
						}
					]
				}
			],
			"description": "üìÅ **File Operations**\n\nComplete file lifecycle management with security validation, processing capabilities, and isolated storage per application."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3001",
			"type": "string",
			"description": "Base URL for File Manager API"
		}
	]
}